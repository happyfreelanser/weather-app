{"version":3,"sources":["components/locationForm/locationForm.js","services/weatherServices.js","components/weatherData/weatherData.js","components/select/select.js","components/app/app.js","index.js"],"names":["LocationForm","props","state","value","onValueChange","bind","onSubmit","e","this","setState","target","preventDefault","addCity","className","type","placeholder","onChange","Component","WeatherServices","_apiBase","_apiKey","url","fetch","res","json","text","getWeather","dataWeather","_transformDataWeather","weather","name","temp","Math","round","main","temp_max","temp_min","WeatherData","error","undefined","SelectCity","listCity","arr","map","item","key","to","onClick","selectCity","items","cityOptions","class","App","viewCity","city","getCityWeather","then","path","Grid","container","Row","columns","centered","Column","textAlign","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dda38658.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n//import { Select } from 'semantic-ui-react';\r\n\r\n\r\nexport default class LocationForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: ''\r\n    }\r\n\r\n    this.onValueChange = this.onValueChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  onValueChange(e) {\r\n    this.setState({\r\n      value: e.target.value\r\n    })\r\n  }\r\n\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n      this.props.addCity(this.state.value);\r\n        this.setState({\r\n          value: ''\r\n        })\r\n  }\r\n\r\n  render() {\r\n\r\n    return(\r\n      <form \r\n        className=\"ui fluid icon input\"\r\n        onSubmit={this.onSubmit}>\r\n        <input \r\n          type='text'\r\n          placeholder='Введите название города'\r\n          onChange={this.onValueChange}\r\n          value={this.state.value}\r\n          />\r\n          <button \r\n            type='submit'\r\n          >\r\n            Показать погоду\r\n          </button>\r\n      </form>\r\n    )  \r\n  }\r\n}\r\n\r\n\r\n","export default class WeatherServices {\r\n  constructor() {\r\n    this._apiBase = 'http://api.openweathermap.org/data/2.5/weather?';\r\n    this._apiKey = '3927405e2cda717f62b8dfc85c6287dd';\r\n  }\r\n\r\n  async getWeather(url) {\r\n    const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n    return await res.json();\r\n  }\r\n\r\n\r\n  async getCityWeather(text){\r\n    const dataWeather = await this.getWeather(`q=${text}&appid=${this._apiKey}&lang=ru`);\r\n\r\n    return this._transformDataWeather(dataWeather);\r\n  }\r\n\r\n  _transformDataWeather(weather) {\r\n    let name = weather.name, \r\n        temp = Math.round( weather.main.temp - 273), \r\n        temp_max = Math.round( weather.main.temp_max - 273), \r\n        temp_min = Math.round( weather.main.temp_min - 273)\r\n\r\n    return {\r\n      name: name,\r\n      temp: temp,\r\n      temp_max: temp_max,\r\n      temp_min: temp_min,\r\n    }\r\n  }\r\n}","import React, {Component} from 'react';\r\nimport './weatherData.css';\r\n\r\nexport default class WeatherData extends Component {\r\n\r\n  render() {\r\n    const {name, temp, temp_max, temp_min, error} = this.props.weather;\r\n\r\n    return(\r\n\r\n      <div>\r\n        { name !== undefined && \r\n          <div>\r\n            <h1 className='city-name' >{name}</h1>\r\n            <h2 className='city-temp' >{temp}&#186;С</h2>\r\n            <div className='city-temp-wrap'>\r\n              <span className='city-temp-max'>MAX &#8212;{temp_max}&#186;С</span>&#8195;&#8195;\r\n              <span className='city-temp-min'>MIN &#8212;{temp_min}&#186;С</span>\r\n            </div>\r\n          </div>\r\n        }\r\n        { error &&\r\n          <p>{error}</p>\r\n        }\r\n      </div>\r\n       \r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './select.css';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default class SelectCity extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n\r\n      this.listCity = this.listCity.bind(this);\r\n  }\r\n\r\n\r\n  listCity(arr) {\r\n    return arr.map((item) => {\r\n      const {value, key} = item;\r\n\r\n        return (\r\n          <Link to={`${value}`}\r\n            className='select-item'\r\n            key={key}\r\n            onClick={() => {this.props.selectCity(value)}}\r\n          >\r\n            {value}\r\n          </Link>\r\n        )\r\n      }) \r\n  }\r\n\r\n  render() {\r\n    const items = this.listCity(this.props.cityOptions);\r\n\r\n    return(\r\n      <div \r\n        className='select-wrap'\r\n        onClick={() => this.setState({class: true})}\r\n      >\r\n        <p>Выбрать город\t&#8744;</p>\r\n        {items}\r\n      </div>\r\n    )\r\n  }\r\n} ","import React, {Component} from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport LocationForm from '../locationForm/locationForm';\r\nimport WeatherServices from '../../services/weatherServices';\r\nimport WeatherData from '../weatherData/weatherData';\r\nimport SelectCity from '../select/select';\r\n\r\n\r\nexport default class App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      weather: {\r\n        name: undefined,\r\n        temp: undefined,\r\n        temp_max: undefined,\r\n        temp_min: undefined,\r\n        error: undefined\r\n      },\r\n      cityOptions: [\r\n        { key: 'od', value: 'Одесса' },\r\n        { key: 'kiev', value: 'Киев' },\r\n        { key: 'lv', value: 'Львов' }\r\n      ],\r\n\r\n      \r\n    }\r\n\r\n    this.viewCity = this.viewCity.bind(this);\r\n  }\r\n\r\n  WeatherServices = new WeatherServices();\r\n\r\n  async viewCity(text) {\r\n    let city = await text;\r\n    this.WeatherServices.getCityWeather(city)\r\n        .then(\r\n          (weather) => {\r\n            this.setState({\r\n                weather: {\r\n                  name: weather.name,\r\n                  temp: weather.temp,\r\n                  temp_max: weather.temp_max,\r\n                  temp_min: weather.temp_min,\r\n                }\r\n            })\r\n          },\r\n          (weather) => {\r\n            this.setState({\r\n              weather: {\r\n                error: 'Введите пожалуйста название города'\r\n              }\r\n            })\r\n          }\r\n        )\r\n  }   \r\n   \r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route path='/'>\r\n            <Grid container>\r\n              <Grid.Row columns={3} centered>\r\n                <Grid.Column>\r\n                  <LocationForm \r\n                    addCity={this.viewCity}\r\n                  />\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <SelectCity\r\n                  cityOptions = {this.state.cityOptions}\r\n                  selectCity={this.viewCity}\r\n                />\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                 <Link to='/'>Главная</Link>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n              <Grid.Row centered>\r\n                <Grid.Column textAlign='center' width={5}>\r\n                  <WeatherData \r\n                    weather={this.state.weather}\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n}\r\n ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}